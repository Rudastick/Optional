Optional to klasa, której obiekty mają jeden z dwóch stanów:
•	Obecny (wewnątrz istnieje obiekt);
•	Nieobecny (tzw pusty optional);


Tworzenie:
Optional jest generyczny i tworzymy go na trzy sposoby:
of() – tworzy Optional na podstawie istniejącego obiektu, nie można przekazać nulla:
ofNullable() tworzy Optional na podstawie istniejącego obiektu lub pusty Optional, jeżeli przekażemy nulla:
empty() – tworzy pusty Optional:

Metody:
IfPresent() – jeżeli Optional zawiera obiekt to wykonuje się przekazane w argumencie wyrażenie (Consumer albo Runnable):
isPresent() – zwraca true albo false:
orElse() – zwraca domyślny obiekt przyjęty wprost w przypadku, kiedy Optional będzie pusty:
orElseGet() – to samo co orElse(), z tą różnicą, że przyjmuje Suppliera:
orElseThrow() – rzuca wyjątkiem w przypadku pustego Optionala:
ifPresentOrElse() (Java 9) - (odpowiednik if-else)
wykonuje pewną czynność zdefiniowaną w pierwszym argumencie kiedy optional jest pełny, w przypadku kiedy optional będzie pusty to wykonuje czynność zdefiniowaną w drugim argumencie (Consumer i Runnable):
or() (Java 9) – pozwala przesłać domyślną wartość (nowego Optionala) jeśli w którymś momencie dostaniemy pustego Optionala:
get() - pobiera obiekt z Optionala, jezeli Optional bedzie pusty, to rzuca wyjatkiem
stream()  - tworzy strumień z optionala:


Wykorzystując optionale i streamy:
napisz metode ktora jako argument pobiera liste integerow a jako wynik zwraca 5 najwkeiszych elementow
na liscie, lub pustą listę jeśli z jakiegokolwiek powodu nie da rady znaleźć 5 najwiekszych elementow

Srednia wieku na podstawie danego property
public static double getAverageAgeBySpecificProperty(List<Person> personList, Predicate<Person> predicate){

